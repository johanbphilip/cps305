(defstruct person
  name age)

(defun filter-ages (a age)
  (let ((vec (make-array 0 :fill-pointer t :adjustable t)))
    (do ((i 0 (1+ i)))
        ((= i (length a)) vec)
      (let ((person (aref a i)))
        (when (> (person-age person) age)
          (vector-push-extend (person-name person) vec))))))

(defun array-group (a b)
  (let ((vec (make-array 0 :fill-pointer t :adjustable t)))
    (dotimes (i (min (length a) (length b)))
      (let ((subarray (make-array 2)))
        (setf (aref subarray 0) (aref a i))
        (setf (aref subarray 1) (aref b i))
        (vector-push-extend subarray vec)))
    (if (> (length a) (length b))
        (do ((i (length b) (1+ i)))
            ((= i (length a)))
          (let ((subarray (make-array 2)))
            (setf (aref subarray 0) (aref a i))
            (setf (aref subarray 1) nil)
            (vector-push-extend subarray vec))))
    (if (> (length b) (length a))
        (do ((i (length a) (1+ i)))
            ((= i (length b)))
          (let ((subarray (make-array 2)))
            (setf (aref subarray 0) nil)
            (setf (aref subarray 1) (aref b i))
            (vector-push-extend subarray vec))))
    vec))
